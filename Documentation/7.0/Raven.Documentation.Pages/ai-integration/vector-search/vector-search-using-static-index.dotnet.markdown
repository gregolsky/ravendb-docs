# Vector Search using a Static Index
---

{NOTE: }

* This article explains how to perform a **vector search** using a **static index**.  
  **Prior to this article**, it is recommended to get familiar with the [Vector search using a dynamic query](../../ai-integration/vector-search/vector-search-using-dynamic-query) article.

* A static index allows you to define a **vector index-field**, enabling you to execute vector searches
  while leveraging the advantages of RavenDB's [indexes](../../indexes/what-are-indexes).

* The vector search feature is only supported by indexes that use the [Corax search engine](../../indexes/search-engine/corax).

* In this page:
    * [Indexing a vector field - Overview](../../ai-integration/vector-search/vector-search/vector-search-using-static-index#indexing-a-vector-field---overview)
       * [Defining a vector field in a static index](../../ai-integration/vector-search/vector-search-using-static-index#defining-a-vector-field-in-a-static-index)
       * [Parameters defined at index definition](../../ai-integration/vector-search/vector-search-using-static-index#parameters-defined-at-index-definition)
       * [Behavior during indexing](../../ai-integration/vector-search/vector-search-using-static-index#behavior-during-indexing)
       * [Parameters used at query time](../../ai-integration/vector-search/vector-search-using-static-index#parameters-used-at-query-time)
       * [Behavior when documents are deleted](../../ai-integration/vector-search/vector-search-using-static-index#vector-behavior-when-documents-are-deleted)
    * [Indexing vector data - TEXT](../../ai-integration/vector-search/vector-search-using-static-index#indexing-vector-data---text)
      * [Indexing raw text](../../ai-integration/vector-search/vector-search-using-static-index#indexing-raw-text)
      * [Indexing pre-made text-embeddings](../../ai-integration/vector-search/vector-search-using-static-index#indexing-pre-made-text-embeddings)
    * [Indexing vector data - NUMERICAL](../../ai-integration/vector-search/vector-search-using-static-index#indexing-vector-data---numerical)
    * [Indexing multiple field types](../../ai-integration/vector-search/vector-search-using-static-index#indexing-multiple-field-types)
    * [Configure the vector field in the Studio](../../ai-integration/vector-search/vector-search-using-static-index#configure-the-vector-field-in-the-studio)

{NOTE/}

---

{PANEL: Indexing a vector field - Overview}

{CONTENT-FRAME: }

#### Defining a vector field in a static index
---

To define a vector index-field in your static-index definition:  

* **From the Client API**:  
 
    When indexing **pre-made text-embeddings** generated by RavenDB's [Embeddings generation tasks](../../ai-integration/generating-embeddings/overview),  
    use the `LoadVector()` method in your index definition.  
    An example is available in [Indexing pre-made text-embeddings](../../ai-integration/vector-search/vector-search-using-static-index#indexing-pre-made-text-embeddings).
   
    When indexing your own data (textual or numerical) that was not generated by these tasks,  
    use the `CreateVector()` method in your index definition.  
    An example is available in [Indexing raw text](../../ai-integration/vector-search/vector-search-using-static-index#indexing-raw-text).  

* **From the Studio**:  
  See [Define a vector field in the Studio](../../ai-integration/vector-search/vector-search-using-static-index#define-a-vector-field-in-the-studio).  

---

The **source data types** that can be used for vector search are detailed in [Data types for vector search](../../ai-integration/vector-search/data-types-for-vector-search).

{CONTENT-FRAME/}
{CONTENT-FRAME: }

#### Parameters defined at index definition  
---

The following params can be defined for the vector index-field in the index definition:  

**Source embedding type** -   
RavenDB supports performing vector search on TEXTUAL values or NUMERICAL arrays.  
This param specifies the embedding format of the source data to be indexed.  
Options include `Text`, `Single`, `Int8`, or `Binary`.  

**Destination embedding type** -   
Specify the quantization format for the embeddings that will be generated.  
Read more about quantization in [Quantization options](../../ai-integration/vector-search/vector-search-using-dynamic-query#quantization-options).

**Dimensions** -   
For numerical input only - define the size of the array from your source document.  

* If this param is Not provided -  
  the size will be determined by the first document indexed and will apply to all subsequent documents.

* Ensure the dimensionality of these numerical arrays (i.e., their length) is consistent across all source documents for the indexed field.
  An index error will occur if a source document has a different dimension for the indexed field.

**Number of edges** -  
Specify the number of edges that will be created for a vector during indexing.  
If not specified, the default value is taken from the following configuration key: [Indexing.Corax.VectorSearch.DefaultNumberOfEdges](../../server/configuration/indexing-configuration#indexing.corax.vectorsearch.defaultnumberofedges).

**Number of candidates for indexing time** -   
The  number of candidates (potential neighboring vectors) that RavenDB evaluates during vector indexing.  
If not specified, the default value is taken from the following configuration key: [Indexing.Corax.VectorSearch.DefaultNumberOfCandidatesForIndexing](../../server/configuration/indexing-configuration#indexing.corax.vectorsearch.defaultnumberofcandidatesforindexing).   
(Note, this param differs from the number of candidates for query time).

{CONTENT-FRAME/}
{CONTENT-FRAME: }

#### Behavior during indexing
---

* **Raw textual input**:  
  When indexing raw textual input from your documents, RavenDB generates embedding vectors using the built-in  
  [bge-micro-v2](https://huggingface.co/TaylorAI/bge-micro-v2) sentence-transformer model, which are then indexed.

* **Pre-made text-embeddings input**:  
  When indexing embeddings that are pre-generated from your documents' raw text by RavenDB's  
  [Embeddings generation tasks](../../ai-integration/generating-embeddings/overview),
  RavenDB indexes them without additional transformation, unless quantization is applied.  
 
* **Raw numerical input**:  
  When indexing pre-made numerical arrays that are already in vector format but were Not generated by these tasks,  
  such as numerical arrays you created externally, RavenDB indexes them without additional transformation,  
  unless quantization is applied.  

---

The embeddings are indexed on the server using the [HNSW algorithm](https://en.wikipedia.org/wiki/Hierarchical_navigable_small_world).  
This algorithm organizes embeddings into a high-dimensional graph structure,  
enabling efficient retrieval of Approximate Nearest Neighbors (ANN) during queries.

{CONTENT-FRAME/}
{CONTENT-FRAME: }

#### Parameters used at query time
---

**Minimum similarity** -  
You can specify the minimum similarity to use when searching for related vectors. Can be a value between `0.0f` and `1.0f`.  
A value closer to `1.0f` requires higher similarity between vectors, while a value closer to `0.0f` allows for less similarity.  
If not specified, the default value is taken from the following configuration key: [Indexing.Corax.VectorSearch.DefaultMinimumSimilarity](../../server/configuration/indexing-configuration#indexing.corax.vectorsearch.defaultminimumsimilarity).

**Number of candidates at query time** -  
You can specify the maximum number of vectors that RavenDB will return from a graph search.  
The number of the resulting documents that correspond to these vectors may be:  

  * lower than the number of candidates - when multiple vectors originated from the same document.  
   
  * higher than the number of candidates - when the same vector is shared between multiple documents.

If not specified, the default value is taken from the following configuration key: [Indexing.Corax.VectorSearch.DefaultNumberOfCandidatesForQuerying](../../server/configuration/indexing-configuration#indexing.corax.vectorsearch.defaultnumberofcandidatesforquerying).

**Search method** -  
You can specify the search method at query time:  

  *  _Approximate Nearest-Neighbor search_ (Default):  
     Search for related vectors in an approximate manner, providing faster results.

  *  _Exact search_:  
     Perform a thorough scan of the vectors to find the actual closest vectors,  
     offering better accuracy but at a higher computational cost.

---

**To ensure consistent comparisons** -  
the search term is transformed into an embedding vector using the same method as the vector index-field.  

**Search results** -  
The server will search for the most similar vectors in the indexed vector space, taking into account all the parameters described.
The documents that correspond to the resulting vectors are then returned to the client.

By default, the resulting documents will be ordered by their score.
You can modify this behavior using the [Indexing.Corax.VectorSearch.OrderByScoreAutomatically](../../server/configuration/indexing-configuration#indexing.corax.vectorsearch.orderbyscoreautomatically) configuration key.  
In addition, you can apply any of the 'order by' methods to your query, as explained in [sort query results](../../client-api/session/querying/sort-query-results).

{CONTENT-FRAME/}
{CONTENT-FRAME: }

#### Vector behavior when documents are deleted  
---

* RavenDB's implementation of the HNSW graph is append-only.  

* When all documents associated with a specific vector are deleted, the vector itself is Not physically removed but is soft-deleted.
  This means the vector is marked as deleted and will no longer appear in query results.  
  Currently, compaction is not supported.

{CONTENT-FRAME/}
{PANEL/}

{PANEL: Indexing vector data - TEXT}

### Indexing raw text

The index in this example indexes data from raw text.  
For an index that indexes pre-made text-embeddings see [this example below](../../ai-integration/vector-search/vector-search-using-static-index#indexing-pre-made-text-embeddings).
 
This index defines a **vector field** named `VectorfromText`.  
It indexes embeddings generated from the raw textual data in the `Name` field of all _Product_ documents.

{CODE-TABS}
{CODE-TAB:csharp:LINQ_index index_1@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:JS_index index_2@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:IndexDefinition index_3@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TABS/}

Execute a vector search using the index:  
Results will include _Product_ documents where the `Name` field is similar to the search term `"italian food"`.

{CODE-TABS}
{CODE-TAB:csharp:Query query_1@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:Query_async query_1_async@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:DocumentQuery query_2@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:DocumentQuery_async query_2_async@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:RawQuery query_3@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:RawQuery_async query_3_async@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB-BLOCK:sql:RQL}
from index "Products/ByVector/Text"
// Optionally, wrap the 'vector.search' query with 'exact()' to perform an exact search
where exact(vector.search(VectorFromText, $searchTerm, 0.82, 20))
{ "searchTerm" : "italian food" }
{CODE-TAB-BLOCK/}
{CODE-TABS/}

---

### Indexing pre-made text-embeddings

The index in this example defines a **vector field** named `VectorfromTextEmbeddings`.  
It indexes pre-made embeddings that were generated by this
[embedding generation task](../../ai-integration/generating-embeddings/embeddings-generation-task#configuring-an-embeddings-generation-task---from-the-studio).
 
{CODE-TABS}
{CODE-TAB:csharp:LINQ_index index_13@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:JS_index index_14@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:IndexDefinition index_15@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TABS/}

Execute a vector search using the index:  
Results will include _Category_ documents where the `Name` field is similar to the search term `"candy"`.

{CODE-TABS}
{CODE-TAB:csharp:Query query_12@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:Query_async query_12_async@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:DocumentQuery query_13@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:DocumentQuery_async query_13_async@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:RawQuery query_14@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:RawQuery_async query_14_async@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB-BLOCK:sql:RQL}
from index "Categories/ByPreMadeTextEmbeddings"
// Optionally, wrap the 'vector.search' query with 'exact()' to perform an exact search
where exact(vector.search(VectorFromTextEmbeddings, $p0, 0.75, 20))
{ "p0": "candy" }
{CODE-TAB-BLOCK/}
{CODE-TABS/}

{PANEL/}

{PANEL: Indexing vector data - NUMERICAL}

{NOTE: }
The examples in this section use the [sample data provided in the dynamic query article](../../ai-integration/vector-search/vector-search-using-dynamic-query#sample-data).
{NOTE/}

---

The following index defines a vector field named `VectorFromSingle`.  
It indexes embeddings generated from the numerical data in the `TagsEmbeddedAsSingle` field of all _Movie_ documents.
The raw numerical data in the source documents is in **32-bit floating-point format**.

{CODE-TABS}
{CODE-TAB:csharp:LINQ_index index_4@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:JS_index index_5@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:IndexDefinition index_6@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TABS/}

Execute a vector search using the index:

{CODE-TABS}
{CODE-TAB:csharp:Query query_4@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:Query_async query_4_async@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:DocumentQuery query_5@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:DocumentQuery_async query_5_async@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:RawQuery query_6@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:RawQuery_async query_6_async@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB-BLOCK:sql:RQL}
from index "Movies/ByVector/Single"
where vector.search(VectorFromSingle, $queryVector)
{ "queryVector" : { "@vector" : [6.599999904632568, 7.699999809265137] }}
{CODE-TAB-BLOCK/}
{CODE-TABS/}

---

The following index defines a vector field named `VectorFromInt8Arrays`.  
It indexes embeddings generated from the numerical arrays in the `TagsEmbeddedAsInt8` field of all _Movie_ documents.
The raw numerical data in the source documents is in **Int8 (8-bit integers) format**. 

{CODE-TABS}
{CODE-TAB:csharp:LINQ_index index_7@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:JS_index index_8@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:IndexDefinition index_9@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TABS/}

Execute a vector search using the index:

{CODE-TABS}
{CODE-TAB:csharp:Query query_7@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:Query_async query_7_async@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:DocumentQuery query_8@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:DocumentQuery_async query_8_async@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:RawQuery query_9@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:RawQuery_async query_9_async@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB-BLOCK:sql:RQL}
from index "Movies/ByVector/Int8"
where vector.search(VectorFromInt8Arrays, $queryVector)
{ "queryVector" : [64, 127, -51, -52, 76, 62] }
{CODE-TAB-BLOCK/}
{CODE-TABS/}

{PANEL/}

{PANEL: Indexing multiple field types}

An index can define multiple types of index-fields. In this example, the index includes:  
A _'regular'_ field, a _'vector'_ field, and a field configured for [full-text search](../../indexes/querying/searching).  
This allows you to query across all fields using various predicates.

{CODE-TABS}
{CODE-TAB:csharp:LINQ_index index_10@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:JS_index index_11@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:IndexDefinition index_12@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TABS/}

Execute a query that combines predicates across all index-field types:  

{CODE-TABS}
{CODE-TAB:csharp:DocumentQuery query_10@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:DocumentQuery_async query_10_async@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:RawQuery query_11@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB:csharp:RawQuery_async query_11_async@AiIntegration\VectorSearch\VectorSearchUsingStaticIndex.cs /}
{CODE-TAB-BLOCK:sql:RQL}
from index "Products/ByMultipleFields"
where PricePerUnit > $minPrice
or search(Name, $searchTerm1)
or vector.search(VectorFromText, $searchTerm2, 0.8)
{ "minPrice" : 200, "searchTerm1" : "Alice", "searchTerm2": "italian" }
{CODE-TAB-BLOCK/}
{CODE-TABS/}

{PANEL/}

{PANEL: Configure the vector field in the Studio}

  ![Add vector field](images/add-vector-field-1.png "Add vector field")

  ![Customize vector field](images/add-vector-field-2.png "Customize vector field")

1. **Vector field name**  
   Enter the name of the vector field to customize.
2. **Configure Vector Field**  
   Click this button to customize the field.
3. **Dimensions**  
   For numerical input only - define the size of the array from your source document.
4. **Edges**  
   The number of edges that will be created for a vector during indexing.
5. **Source embedding type**  
   The format of the source embeddings (Text, Single, Int8, or Binary).
6. **Candidates for indexing**  
   The number of candidates (potential neighboring vectors) that RavenDB evaluates during vector indexing.
7. **Destination embedding type**  
   The quantization format for the embeddings that will be generated (Text, Single, Int8, or Binary).

{PANEL/}

## Related Articles

### Vector Search

- [RavenDB as a vector database](../../ai-integration/vector-search/ravendb-as-vector-database)
- [Vector search using a dynamic query](../../ai-integration/vector-search/vector-search-using-dynamic-query)
- [Data types for vector search](../../ai-integration/vector-search/data-types-for-vector-search)
- [Indexing attachment for vector search](../../ai-integration/vector-search/indexing-attachments-for-vector-search)

### Querying

- [Query overview](../../client-api/session/querying/how-to-query)
- [Full-text search](../../client-api/session/querying/text-search/full-text-search)
