# The Embedding Collections
---

{NOTE: }

* The embeddings generated by the providers are stored as **attachments** in your database.  
  Each attachment contains a single embedding.

* The server creates the following dedicated collections,  
  which contain documents that reference the embedding attachments:  
  * **Embeddings Collection**
  * **Embeddings Cache Collection**

* This article describes these custom-designed collections.  
  It is recommended to first refer to this [overview](../../ai-integration/generating-embeddings/overview#embeddings-generation---overview)
  to understand the embeddings generation process flow.

---

* In this page:
    * [The embeddings collection](../../ai-integration/generating-embeddings/embedding-collections#the-embeddings-collection)
    * [The embeddings cache collection](../../ai-integration/generating-embeddings/embedding-collections#the-embeddings-cache-collection)
    
{NOTE/}

---

{PANEL: The embeddings collection}

* RavenDB creates a separate embeddings collection for each source collection from which embeddings are generated.
  The naming format for this collection is: `<source-collection-name>/embeddings`.
* This collection stores documents that reference the embedding attachments derived from the content of the source documents' content.
* Each document in the embeddings collection contains all embeddings generated from the source document's content by any defined embedding generation task.
* The document structure in the embeddings collection is:

{CODE-BLOCK:json}
{
    "identifier-of-task-1": {
        "@quantization": "<quantization-format>", // Shown only if embeddings are Quantized
        "Property1": [
            "A hash created from the 1st text chunk of Property1's content",
            "A hash created from the 2nd text chunk of Property1's content",   
            "A hash created from the 3rd text chunk of Property1's content", 
            "..."
        ],
        "Property2": [
            "A hash created from the 1st text chunk of Property2's content",
            "..."
        ]
    },
    "identifier-of-task-2": {
        "Property3": [
            "A hash created from the 1st text chunk of Property3's content",
            "..."
        ]
    },
    "Other-tasks...": {
        ...
    },
    "@metadata": {
        "@collection": "<source-collection-name>/embeddings",
        "@flags": "HasAttachments"
    }
}
{CODE-BLOCK/}

---

* For example:  
  In this [task definition](../../ai-integration/generating-embeddings/embeddings-generation-task#configuring-an-embeddings-generation-task---from-the-studio),
  an embeddings generation task is defined on the `Categories` collection.  
  This creates the `Categories/embeddings` collection, where a document will look as follows:

    ![The embeddings document](images/embeddings-collection-1.png)

  1. **Collection name**   
     The unique name of the embeddings collection: `Categories/embeddings`.
  2. **Document ID**  
     Each document ID in this collection follows the format: `<source-document-name>/embeddings`  
  3. **Task identifier**  
     The identifier of the task that generated the embeddings for the listed properties.  
  4. **Source properties & their hash**:  
     This section contains properties from the source document that were converted into embeddings.  
     Each property includes a hash derived from its content:  
     `<property-name>: [<hash-created-from-conent>, ...]`
  5. **Attachment flag**  
     Indicates that the document includes attachments, which store the embeddings.  
     The next image shows the embedding attachments in the document's properties pane.

    ![The embeddings document - attachments](images/embeddings-collection-2.png)

  * Each attachment contains a singe embedding.
  
  * The attachment name follows this format:  
    `<task-identifier>_<property-name>_<hash-created-from-property-content>`
  
  * If the embeddings were [Quantized](../../ai-integration/vector-search/vector-search-using-dynamic-query#what-is-quantization) by the task,
    the format includes the quantization type:  
    `<task-identifier>_<property-name>_<hash-created-from-property-content>_<quantization-format>`

{PANEL/}

{PANEL: The embeddings cache collection}

{CONTENT-FRAME: }

* In addition to creating embeddings collections for each source collection,  
  RavenDB creates and maintains a single **embeddings cache collection** named: `@embeddings-cache`.

* This collection references all embeddings generated by providers,
  both when generating embeddings from source documents and when generating embeddings from search terms in vector search queries.

* Each document in the `@embeddings-cache` collection references a single attachment containing an embedding vector.
  The document ID includes the [connection string identifier](../../ai-integration/connection-strings/connection-strings-overview#creating-an-ai-connection-string)
  and a hash generated from the property's content.

* **Performance benefits**:  
  Before making a request to the provider, RavenDB first checks the cache for an existing embedding from the same provider. 
  If a cached embedding is found for the given input, RavenDB reuses it, reducing latency and avoiding unnecessary provider requests.
  This applies both when generating embeddings for source document content and when performing a vector search that requires an embedding for the search term.

* **Expiration policy**:  
  Each document in this cache collection has an expiration date.
  Once the expiration date is reached, the document is automatically deleted (provided that [document expiration](../../studio/database/settings/document-expiration) is enabled).

     When a source document (from which embeddings were generated) is modified,
     RavenDB extends the expiration date of the relevant document in this cache if the remaining time is less than one-third of the original duration.

{CONTENT-FRAME/}

---

* **The @embeddings-cache collection**: 

    ![The embeddings cache - list](images/embeddings-cache-1.png)

  1. **Collection name**  
     The name of the embeddings cache collection: `@embeddings-cache`.  
  
  2. **Connection string identifier**  
     The document ID includes the connection string identifier, which specifies the provider that generated the embedding.

  3. **Hash**  
     A hash created from the text chunk of the source document property's content.

---

* **A document in the @embeddings-cache collection**:  
 
    ![The embeddings cache - document](images/embeddings-cache-2.png)

  1. **Document ID**  
     The document ID follows this format:  
     `embeddings-cache/<connection-string-identifier>/<hash-created-from-property-content>`
        
        If the embedding was [Quantized](../../ai-integration/vector-search/vector-search-using-dynamic-query#what-is-quantization) by the task,
        the format includes the quantization type:  
     `embeddings-cache/<connection-string-identifier>/<hash-created-from-property-content>/<quantization-format>`
 
   2. **Expiration time**  
      The document is removed when the expiration time is reached.

---

* **The embedding attachment**:

    ![The embeddings cache - attachments](images/embeddings-cache-3.png)

    * In this collection, the attachment name consists only of the hash:  
      `<hash-created-from-property-content>`

{PANEL/}

## Related Articles

### Vector Search

- [RavenDB as a vector database](../../ai-integration/vector-search/ravendb-as-vector-database)
- [Vector search using a static index](../../ai-integration/vector-search/vector-search-using-static-index)
- [Vector search using a dynamic query](../../ai-integration/vector-search/vector-search-using-dynamic-query)

### Embeddings Generation

- [Generating Embeddings - overview](../../ai-integration/generating-embeddings/overview)
- [Embeddings generation task](../../ai-integration/generating-embeddings/embeddings-generation-task)

### AI Connection Strings

- [Connection strings - overview](../../ai-integration/connection-strings/connection-strings-overview)
